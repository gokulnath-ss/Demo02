"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const y=require("vscode"),X=require("crypto"),q=require("path"),z=require("node:util"),K=require("node:child_process"),J=require("child_process"),Q=require("fs");function E(r){const e=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(r){for(const t in r)if(t!=="default"){const s=Object.getOwnPropertyDescriptor(r,t);Object.defineProperty(e,t,s.get?s:{enumerable:!0,get:()=>r[t]})}}return e.default=r,Object.freeze(e)}const a=E(y),N=E(q),Z=E(J),x=E(Q);var g=(r=>(r[r.INDEX_MODIFIED=0]="INDEX_MODIFIED",r[r.INDEX_ADDED=1]="INDEX_ADDED",r[r.INDEX_DELETED=2]="INDEX_DELETED",r[r.INDEX_RENAMED=3]="INDEX_RENAMED",r[r.INDEX_COPIED=4]="INDEX_COPIED",r[r.MODIFIED=5]="MODIFIED",r[r.DELETED=6]="DELETED",r[r.UNTRACKED=7]="UNTRACKED",r[r.IGNORED=8]="IGNORED",r[r.INTENT_TO_ADD=9]="INTENT_TO_ADD",r[r.ADDED_BY_US=10]="ADDED_BY_US",r[r.ADDED_BY_THEM=11]="ADDED_BY_THEM",r[r.DELETED_BY_US=12]="DELETED_BY_US",r[r.DELETED_BY_THEM=13]="DELETED_BY_THEM",r[r.BOTH_ADDED=14]="BOTH_ADDED",r[r.BOTH_DELETED=15]="BOTH_DELETED",r[r.BOTH_MODIFIED=16]="BOTH_MODIFIED",r))(g||{});class p extends a.TreeItem{async getChildren(e){return[]}}class ${decorations=new Map;_onDidChangeFileDecorations=new y.EventEmitter;onDidChangeFileDecorations=this._onDidChangeFileDecorations.event;set(e,t){t?this.decorations.set(e.toString(),t):this.decorations.delete(e.toString()),this._onDidChangeFileDecorations.fire(e)}provideFileDecoration(e){return this.decorations.get(e.toString())}}const W=new $,L=new $,ee={[g.INDEX_ADDED]:{letter:"ðŸ’š",name:"Added"},[g.MODIFIED]:{letter:"ðŸ’›",name:"Modified"},[g.DELETED]:{letter:"ðŸ’”",name:"Deleted"},[g.INDEX_RENAMED]:{letter:"ðŸ’™",name:"Renamed"}};class te extends p{constructor(e,t,s={}){super(e.uri.path),this.change=e,this.manager=t,this.relPath=e.uri.path.replace(`${e.commit.repository.rootUri.path}/`,""),this.originalRelPath=e.originalUri.path.replace(`${e.commit.repository.rootUri.path}/`,"");const o=ee[e.status],n=this.relPath.split("/");L.set(e.uri,new y.FileDecoration(o.letter,o.name)),this.id=[s.parentId||"",this.relPath].join("->"),this.label=n.pop(),this.description=n.join("/"),this.resourceUri=e.uri,this.tooltip=this.relPath,this.contextValue="changeNode",this.command={title:"diff",command:"gitCommits.diffChange",arguments:[this]}}relPath;originalRelPath}const I=new Map,_={github(r){const e=r.match(/^\d+\+([^@]+)@users.noreply.github.com$/);return e?`https://github.com/${e[1]}.png`:`https://avatars.githubusercontent.com/u/e?email=${encodeURIComponent(r)}&s=20`},gravatar(r){return`https://www.gravatar.com/avatar/${X.createHash("md5").update(r).digest("hex")}?s=20&d=robohash`}},P="gravatar";function re(r,e=P){const t=`${e}:${r}`;if(I.has(t))return I.get(t);const s=(_[e]||_[P])(r);return I.set(t,s),s}class se extends p{constructor(e,t,s={}){super(e,a.TreeItemCollapsibleState.Expanded),this.children=t,this.id=[s.parentId||"",e].join("->"),this.contextValue="folderNode",this.resourceUri=a.Uri.parse(e)}async getChildren(e){return this.children}}const v=Symbol("files");function ie(r,e,t){const s=new Map;return r.forEach(o=>{const n=o.resourceUri?.path.replace(e,"").split("/");if(!n)return;n.shift(),n.pop();const m=n.reduce((i,c)=>(i.has(c)||i.set(c,new Map),i.get(c)),s);m.has(v)||m.set(v,new Set),m.get(v).add(o)}),Y(s,t)}function Y(r,e){const t=[];return[...r.keys()].forEach(s=>{const o=r.get(s);o&&(s===v?t.push(...o):t.push(new se(s,Y(o,[e||"",s].join("->")),{parentId:e})))}),t}function d(r){if(r===null||r===!0||r===!1)return NaN;var e=Number(r);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function u(r,e){if(e.length<r)throw new TypeError(r+" argument"+(r>1?"s":"")+" required, but only "+e.length+" present")}function D(r){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?D=function(t){return typeof t}:D=function(t){return t&&typeof Symbol=="function"&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},D(r)}function h(r){u(1,arguments);var e=Object.prototype.toString.call(r);return r instanceof Date||D(r)==="object"&&e==="[object Date]"?new Date(r.getTime()):typeof r=="number"||e==="[object Number]"?new Date(r):((typeof r=="string"||e==="[object String]")&&typeof console<"u"&&(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn(new Error().stack)),new Date(NaN))}function ae(r,e){u(2,arguments);var t=h(r),s=d(e);return isNaN(s)?new Date(NaN):(s&&t.setDate(t.getDate()+s),t)}function oe(r,e){u(2,arguments);var t=h(r),s=d(e);if(isNaN(s))return new Date(NaN);if(!s)return t;var o=t.getDate(),n=new Date(t.getTime());n.setMonth(t.getMonth()+s+1,0);var m=n.getDate();return o>=m?n:(t.setFullYear(n.getFullYear(),n.getMonth(),o),t)}function C(r){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?C=function(t){return typeof t}:C=function(t){return t&&typeof Symbol=="function"&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},C(r)}function w(r,e){if(u(2,arguments),!e||C(e)!=="object")return new Date(NaN);var t=e.years?d(e.years):0,s=e.months?d(e.months):0,o=e.weeks?d(e.weeks):0,n=e.days?d(e.days):0,m=e.hours?d(e.hours):0,i=e.minutes?d(e.minutes):0,c=e.seconds?d(e.seconds):0,l=h(r),b=s||t?oe(l,s+t*12):l,S=n||o?ae(b,n+o*7):b,B=i+m*60,G=c+B*60,V=G*1e3,j=new Date(S.getTime()+V);return j}function R(r){var e=new Date(Date.UTC(r.getFullYear(),r.getMonth(),r.getDate(),r.getHours(),r.getMinutes(),r.getSeconds(),r.getMilliseconds()));return e.setUTCFullYear(r.getFullYear()),r.getTime()-e.getTime()}function H(r){u(1,arguments);var e=h(r);return e.setHours(0,0,0,0),e}var ne=864e5;function me(r,e){u(2,arguments);var t=H(r),s=H(e),o=t.getTime()-R(t),n=s.getTime()-R(s);return Math.round((o-n)/ne)}function f(r,e){u(2,arguments);var t=h(r),s=h(e),o=t.getTime()-s.getTime();return o<0?-1:o>0?1:o}var ce=6e4,he=36e5;function ue(r,e){u(2,arguments);var t=h(r),s=h(e),o=t.getFullYear()-s.getFullYear(),n=t.getMonth()-s.getMonth();return o*12+n}function le(r,e){u(2,arguments);var t=h(r),s=h(e);return t.getFullYear()-s.getFullYear()}function U(r,e){var t=r.getFullYear()-e.getFullYear()||r.getMonth()-e.getMonth()||r.getDate()-e.getDate()||r.getHours()-e.getHours()||r.getMinutes()-e.getMinutes()||r.getSeconds()-e.getSeconds()||r.getMilliseconds()-e.getMilliseconds();return t<0?-1:t>0?1:t}function de(r,e){u(2,arguments);var t=h(r),s=h(e),o=U(t,s),n=Math.abs(me(t,s));t.setDate(t.getDate()-o*n);var m=+(U(t,s)===-o),i=o*(n-m);return i===0?0:i}function k(r,e){return u(2,arguments),h(r).getTime()-h(e).getTime()}var O={ceil:Math.ceil,round:Math.round,floor:Math.floor,trunc:function(e){return e<0?Math.ceil(e):Math.floor(e)}},ge="trunc";function A(r){return r?O[r]:O[ge]}function fe(r,e,t){u(2,arguments);var s=k(r,e)/he;return A(t?.roundingMethod)(s)}function pe(r,e,t){u(2,arguments);var s=k(r,e)/ce;return A(t?.roundingMethod)(s)}function we(r){u(1,arguments);var e=h(r);return e.setHours(23,59,59,999),e}function ye(r){u(1,arguments);var e=h(r),t=e.getMonth();return e.setFullYear(e.getFullYear(),t+1,0),e.setHours(23,59,59,999),e}function ve(r){u(1,arguments);var e=h(r);return we(e).getTime()===ye(e).getTime()}function De(r,e){u(2,arguments);var t=h(r),s=h(e),o=f(t,s),n=Math.abs(ue(t,s)),m;if(n<1)m=0;else{t.getMonth()===1&&t.getDate()>27&&t.setDate(30),t.setMonth(t.getMonth()-o*n);var i=f(t,s)===-o;ve(h(r))&&n===1&&f(r,s)===1&&(i=!1),m=o*(n-Number(i))}return m===0?0:m}function Ce(r,e,t){u(2,arguments);var s=k(r,e)/1e3;return A(t?.roundingMethod)(s)}function Ee(r,e){u(2,arguments);var t=h(r),s=h(e),o=f(t,s),n=Math.abs(le(t,s));t.setFullYear(1584),s.setFullYear(1584);var m=f(t,s)===-o,i=o*(n-Number(m));return i===0?0:i}function Me(r){u(1,arguments);var e=h(r.start),t=h(r.end);if(isNaN(e.getTime()))throw new RangeError("Start Date is invalid");if(isNaN(t.getTime()))throw new RangeError("End Date is invalid");var s={};s.years=Math.abs(Ee(t,e));var o=f(t,e),n=w(e,{years:o*s.years});s.months=Math.abs(De(t,n));var m=w(n,{months:o*s.months});s.days=Math.abs(de(t,m));var i=w(m,{days:o*s.days});s.hours=Math.abs(fe(t,i));var c=w(i,{hours:o*s.hours});s.minutes=Math.abs(pe(t,c));var l=w(c,{minutes:o*s.minutes});return s.seconds=Math.abs(Ce(t,l)),s}function Te(r){const e=new Date,t=Me({start:e,end:r}),s=e<r;return t.years?{unit:"year",value:s?t.years:-t.years}:t.months?{unit:"month",value:s?t.months:-t.months}:t.days?t.days>6?{unit:"week",value:s?Math.ceil(t.days/7):Math.floor(-t.days/7)}:{unit:"day",value:s?t.days:-t.days}:t.hours?{unit:"hour",value:s?t.hours:-t.hours}:t.minutes?{unit:"minute",value:s?t.minutes:-t.minutes}:{unit:"second",value:s?t.seconds||0:-(t.seconds||0)}}class M extends p{constructor(e,t,s={}){super(e.message,a.TreeItemCollapsibleState.Collapsed),this.commit=e,this.manager=t,this.options=s,this.id=[s.parentId||"",e.hash].join("->"),this.isMergeCommit=this.commit.parents.length>0,this.description=this.relativeTime,this.contextValue="commitNode",this.tooltip=[`${e.authorName} (${e.authorEmail}) -- ${e.shortHash}`,"",this.relativeTime,e.authorDate,"",e.message].join(`
`),e.authorEmail&&(this.iconPath=a.Uri.parse(re(e.authorEmail,this.remoteHost)))}isMergeCommit;get relativeTime(){const{value:e,unit:t}=Te(this.commit.authorDate||new Date);return new Intl.RelativeTimeFormat(a.env.language,{style:"long"}).format(e,t)}async getChildren(e={}){if(e.showMergeChildren&&this.isMergeCommit)return(await this.manager.fetchMergeCommits(this.commit.hash)).map(n=>new M(n,this.manager,{viewAsTree:this.options.viewAsTree,parentId:this.id}));const s=(await this.manager.fetchCommitChanges(this.commit)).map(o=>new te(o,this.manager,{parentId:this.id}));return this.options.viewAsTree?ie(s,this.manager.repository.rootUri.path,this.id):s}get remoteHost(){const e=this.manager.repository.state.remotes,t=e.find(m=>m.name==="origin")||e[0],s=t&&t.fetchUrl||"",n=new RegExp(/(\/\/|@)(?<host>[a-z][a-z0-9+\-]+)/).exec(s);if(n&&n.groups&&n.groups.host)return n.groups.host}}const be=/([0-9a-f]{40})\n(.*)\n(.*)\n(.*)\n(.*)\n(.*)(?:\n([^]*?))?(?:\x00)/gm;function Ie(r){let e=[],t,s,o,n,m,i,c,l;do{if(l=be.exec(r),l===null)break;[,t,s,o,n,m,i,c]=l,c[c.length-1]===`
`&&(c=c.substr(0,c.length-1)),e.push({hash:` ${t}`.substr(1),message:` ${c}`.substr(1),parents:i?i.split(" "):[],authorDate:new Date(Number(n)*1e3),authorName:` ${s}`.substr(1),authorEmail:` ${o}`.substr(1),commitDate:new Date(Number(m)*1e3)})}while(!0);return e}const ke=z.promisify(K.execFile),Ae="%H%n%aN%n%aE%n%at%n%ct%n%P%n%B";class Ne{constructor(e,t){this.gitApi=e,this.repository=t}async fetchStashes(){return this.getCommits("stash",["list"])}async fetchCommits(e){return this.getCommits("log",[`-n${e}`,"--first-parent"])}async fetchMergeCommits(e){return(await this.getCommits("log",[`${e}~...${e}`])).filter(s=>s.hash!==e)}async fetchRemotes(){return this.repository.state.remotes}async fetchWorktrees(){return this.getWorktrees()}async lockWorktree(e){await this.executeGitCommand(["worktree","lock",e.uri.fsPath]),e.isLocked=!0}async unlockWorktree(e){await this.executeGitCommand(["worktree","unlock",e.uri.fsPath]),e.isLocked=!1}async moveWorktree(e,t){await this.executeGitCommand(["worktree","move",e.uri.fsPath,t]),e.uri=a.Uri.file(t)}async removeWorktree(e){await this.executeGitCommand(["worktree","remove",e.uri.fsPath])}async addWorktree(e){await this.executeGitCommand(["worktree","add",e,"HEAD"])}async fetchCommitChanges(e){const s=(await this.repository.diffBetween(e.parentHash,e.hash)).map(o=>{const n=o;return n.commit=e,n.uri=this.gitApi.toGitUri(a.Uri.file(n.uri.fsPath),e.hash),n.originalUri=this.gitApi.toGitUri(a.Uri.file(n.originalUri.fsPath),e.parentHash),n.renameUri=this.gitApi.toGitUri(a.Uri.file(n.renameUri.fsPath),e.parentHash),n});return this.sortChanges(s)}async revertCommit(e){await this.executeGitCommand(["revert",e.hash])}async diffChange(e){const t={uri:e.originalUri,label:e.commit.parentShortHash},s={uri:e.uri,label:e.commit.shortHash};await this.diff(t,s)}async diffChangeWithHead(e,t=!1){const s={uri:e.uri,label:e.commit.shortHash},o={uri:this.gitApi.toGitUri(a.Uri.file(e.uri.fsPath),"HEAD"),label:"current"};await(t?this.diff(o,s):this.diff(s,o))}async diff(e,t){const s={preview:!0,viewColumn:a.ViewColumn.Active},o=`${N.basename(e.uri.path)} (${e.label}) âŸ· ${N.basename(t.uri.path)} (${t.label})`;await a.commands.executeCommand("vscode.diff",e.uri,t.uri,o,s)}sortChanges(e){return e.sort((t,s)=>{const o=t.uri.path.split("/"),n=s.uri.path.split("/");return o.length<n.length?1:o.length>n.length||o.find((m,i)=>m<n[i])?-1:1})}convertToCommits(e){return e.map((t,s)=>(t.message=t.message.split(`
`)[0].trim(),t.index=s,t.parentHash=t.parents.shift()||t.hash,t.shortHash=t.hash.substr(0,7),t.parentShortHash=t.parentHash.substr(0,7),t.repository=this.repository,t))}async getWorktrees(){const e=["worktree","list","--porcelain"];let t;try{t=await this.executeGitCommand(e)}catch{return[]}return t.stdout.split(`

`).filter(Boolean).flatMap((s,o)=>{const n=s.split(`
`).reduce((m,i)=>{const[c,l]=i.split(" ");return m[c]=l||!0,m},{});return{isLocked:n.locked||!1,isOrigin:o===0,uri:a.Uri.file(n.worktree),branch:n.branch?.split("/").pop()||"",hash:n.HEAD,shortHash:n.HEAD.slice(0,7)}})}async getCommits(e,t=[]){const s=[e,...t,`--format=${Ae}`,"-z","--"];let o;try{o=await this.executeGitCommand(s)}catch{return[]}return this.convertToCommits(Ie(o.stdout))}async executeGitCommand(e){return ke(this.gitApi.git.path,e,{cwd:this.repository.rootUri.fsPath})}}class F extends p{constructor(e){super(e),this.text=e,this.contextValue="textNode"}}class T{constructor(e){this.gitApi=e,this.trackRepositories(),!this.manager&&this.gitApi.repositories[0]&&this.selectRepository(this.gitApi.repositories[0])}_onDidChangeTreeData=new a.EventEmitter;onDidChangeTreeData=this._onDidChangeTreeData.event;_stateObserver;trackedRepositoriesDisposers=new Map;manager;emptyMessage;get childrenOptions(){}refresh(){this._onDidChangeTreeData.fire(void 0)}getTreeItem(e){return e}async getTreeItems(e){return[]}async getChildren(e){if(e)return e.getChildren(this.childrenOptions);const{manager:t}=this;if(!t)return[new F("No active repository could be found.")];const s=await this.getTreeItems(t);return s.length<1&&this.emptyMessage?[new F(this.emptyMessage)]:s}onRepositoryChange(e){}onStateChange(e){this.refresh()}selectRepository(e){this.manager=new Ne(this.gitApi,e),this.onRepositoryChange(e),this.observeRepositoryState(e),this.refresh()}observeRepositoryState(e){this._stateObserver&&this._stateObserver.dispose(),this._stateObserver=e.state.onDidChange(()=>this.onStateChange(e))}trackRepositories(){this.gitApi.repositories.forEach(e=>this.trackRepository(e)),this.gitApi.onDidOpenRepository(e=>this.trackRepository(e)),this.gitApi.onDidCloseRepository(e=>this.untrackRepository(e))}trackRepository(e){if(this.trackedRepositoriesDisposers.has(e))return;const t=e.ui.onDidChange(()=>{e.ui.selected&&this.selectRepository(e)});this.trackedRepositoriesDisposers.set(e,t),e.ui.selected&&this.selectRepository(e)}untrackRepository(e){const t=this.trackedRepositoriesDisposers.get(e);if(t&&(t.dispose(),this.trackedRepositoriesDisposers.delete(e)),e.ui.selected){const s=this.gitApi.repositories[0];s&&this.selectRepository(s)}}}class xe extends T{emptyMessage="No commits could be found.";currentHead;viewAsTree=!1;get childrenOptions(){return{showMergeChildren:!0}}setView(e){this.viewAsTree=e,this.refresh()}onStateChange(e){const t=this.getHeadCommit(e);this.currentHead!==t&&(this.currentHead=t,super.onStateChange(e))}onRepositoryChange(e){this.currentHead=this.getHeadCommit(e)}async getTreeItems(e){return(await e.fetchCommits(30)).map(s=>new M(s,e,{viewAsTree:this.viewAsTree}))}getHeadCommit(e){return e.state.HEAD&&e.state.HEAD.commit}}class _e extends T{emptyMessage="No stashes could be found.";async getTreeItems(e){return(await e.fetchStashes()).map(s=>new M(s,e))}}class Pe extends p{constructor(e,t){super(e.name),this.remote=e,this.manager=t,this.contextValue="remoteNode",this.description=e.fetchUrl;const s=e.pushUrl&&e.pushUrl!==e.fetchUrl;this.tooltip=[`Name: ${e.name}`,`ReadOnly: ${e.isReadOnly}`,`FetchUrl: ${e.fetchUrl}`,s?`PushUrl: ${e.pushUrl}`:void 0].filter(Boolean).join(`
`),this.iconPath=new a.ThemeIcon("remote")}}class Re extends T{emptyMessage="No remotes could be found.";async getTreeItems(e){return(await e.fetchRemotes()).map(s=>new Pe(s,e))}}class He extends p{constructor(e,t){super(e.uri.path.split("/").pop()),this.worktree=e,this.manager=t,this.description=[e.branch,`(${e.shortHash})`].filter(Boolean).join(" "),this.contextValue=this.worktree.isOrigin?"worktreeNodeOrigin":this.worktree.isLocked?"worktreeNodeLocked":"worktreeNodeUnlocked",this.tooltip=[`Path: ${e.uri.path}`,`Branch: ${e.branch}`,`Hash: ${e.hash}`].filter(Boolean).join(`
`),this.iconPath=new a.ThemeIcon(e.isOrigin?"repo":"repo-clone"),this.resourceUri=e.uri,this.command={title:"Open Worktree",command:"gitCommits.openWorktree",arguments:[this]},W.set(this.worktree.uri,new y.FileDecoration(this.worktree.isLocked?"ðŸ”’":""))}decoration=new y.FileDecoration;async lock(){await this.manager.lockWorktree(this.worktree)}async unlock(){await this.manager.unlockWorktree(this.worktree)}async move(e){await this.manager.moveWorktree(this.worktree,e)}async remove(){await this.manager.removeWorktree(this.worktree)}}class Ue extends T{emptyMessage="No worktrees could be found.";async getTreeItems(e){return(await e.fetchWorktrees()).map(s=>new He(s,e))}}function Oe(r){const e=a.extensions.getExtension("vscode.git");if(!e||!e.isActive)return;const t=e.exports.getAPI(1),s=new xe(t),o=new _e(t),n=new Re(t),m=new Ue(t);r.subscriptions.push(a.window.createTreeView("gitCommits.commits",{treeDataProvider:s,showCollapseAll:!0}),a.window.createTreeView("gitCommits.stashes",{treeDataProvider:o,showCollapseAll:!0}),a.window.createTreeView("gitCommits.remotes",{treeDataProvider:n,showCollapseAll:!1}),a.window.createTreeView("gitCommits.worktrees",{treeDataProvider:m,showCollapseAll:!1}),a.commands.registerCommand("gitCommits.undoCommit",async i=>{await a.commands.executeCommand("git.undoCommit",i)}),a.commands.registerCommand("gitCommits.copyCommitHash",async i=>{await a.env.clipboard.writeText(i.commit.hash)}),a.commands.registerCommand("gitCommits.commits.viewAsTree",async()=>{await a.commands.executeCommand("setContext","gitCommits.commits.settings.viewAsTree",!0),s.setView(!0)}),a.commands.registerCommand("gitCommits.commits.viewAsList",async()=>{await a.commands.executeCommand("setContext","gitCommits.commits.settings.viewAsTree",!1),s.setView(!1)}),a.commands.registerCommand("gitCommits.diffChange",async i=>{await i.manager.diffChange(i.change)}),a.commands.registerCommand("gitCommits.diffChangeWithHead",async i=>{await i.manager.diffChangeWithHead(i.change)}),a.commands.registerCommand("gitCommits.reversedDiffChangeWithHead",async i=>{await i.manager.diffChangeWithHead(i.change,!0)}),a.commands.registerCommand("gitCommits.copyFilePath",async i=>{await a.env.clipboard.writeText(i.relPath)}),a.commands.registerCommand("gitCommits.openCurrentFile",async i=>{if(!x.existsSync(i.change.uri.fsPath))return a.window.showErrorMessage("This file does not exist anymore");await a.commands.executeCommand("vscode.open",a.Uri.file(i.change.uri.fsPath),{preview:!0,viewColumn:a.ViewColumn.Active})}),a.commands.registerCommand("gitCommits.previewFile",async i=>{await a.commands.executeCommand("vscode.open",i.change.uri,{preview:!0,viewColumn:a.ViewColumn.Active})}),a.commands.registerCommand("gitCommits.revertChange",async i=>{if(!await a.window.showInformationMessage("Are you sure you want to revert these changes?",{modal:!0},{title:"Revert changes"}))return!1;let l;i.change.status===g.INDEX_ADDED?x.existsSync(i.change.uri.fsPath)?l=`rm '${i.relPath}' && git add '${i.relPath}'`:await a.window.showInformationMessage("This change is already reverted"):l=`git checkout ${i.change.commit.parentHash} -- '${i.originalRelPath}'`,l&&(Z.execSync(l,{cwd:i.change.commit.repository.rootUri.fsPath}),await a.window.showInformationMessage("Change has been reverted"))}),a.commands.registerCommand("gitCommits.revertCommit",async i=>{if(!await a.window.showInformationMessage("Are you sure you want to revert this commit?",{modal:!0},{title:"Revert commit"}))return!1;await i.manager.revertCommit(i.commit),await a.commands.executeCommand("git.undoCommit",i)}),a.commands.registerCommand("gitCommits.stash",async()=>{await a.commands.executeCommand("git.stash")}),a.commands.registerCommand("gitCommits.stashIncludeUntracked",async()=>{await a.commands.executeCommand("git.stashIncludeUntracked")}),a.commands.registerCommand("gitCommits.stashPopLatest",async()=>{if(!await a.window.showInformationMessage("Are you sure you want to apply and remove the stash item?",{modal:!0},{title:"Pop stash item"}))return!1;await a.commands.executeCommand("git.stashPopLatest")}),a.commands.registerCommand("gitCommits.stashApplyLatest",async()=>{if(!await a.window.showInformationMessage("Are you sure you want to apply the stash item?",{modal:!0},{title:"Apply stash item"}))return!1;await a.commands.executeCommand("git.stashApplyLatest")}),a.commands.registerCommand("gitCommits.stashPop",async i=>{if(!await a.window.showInformationMessage("Are you sure you want to apply and remove the stash item?",{modal:!0},{title:"Pop stash item"}))return!1;await i.commit.repository.repository.popStash(i.commit.index)}),a.commands.registerCommand("gitCommits.stashApply",async i=>{if(!await a.window.showInformationMessage("Are you sure you want to apply the stash item?",{modal:!0},{title:"Apply stash item"}))return!1;await i.commit.repository.repository.applyStash(i.commit.index)}),a.commands.registerCommand("gitCommits.stashDrop",async i=>{if(!await a.window.showInformationMessage("Are you sure you want to remove the stash item?",{modal:!0},{title:"Remove stash item"}))return!1;await i.commit.repository.repository.dropStash(i.commit.index)}),a.commands.registerCommand("gitCommits.addRemote",async()=>{await a.commands.executeCommand("git.addRemote")}),a.commands.registerCommand("gitCommits.removeRemote",async i=>{const c=i.remote.name;if(!await a.window.showInformationMessage(`Are you sure you want to remove "${c}" remote?`,{modal:!0},{title:"Remove"}))return!1;await i.manager.repository.removeRemote(c)}),a.commands.registerCommand("gitCommits.pullFromRemote",async i=>{const c=i.remote.name;await i.manager.repository.repository.pullFrom(!1,c,i.manager.repository.state.HEAD?.name)}),a.commands.registerCommand("gitCommits.moveWorktree",async i=>{const c=await a.window.showInputBox({prompt:"Enter new path for worktree",value:i.worktree.uri.fsPath});if(!c)return!1;await i.move(c),m.refresh()}),a.commands.registerCommand("gitCommits.lockWorktree",async i=>{await i.lock(),m.refresh()}),a.commands.registerCommand("gitCommits.unlockWorktree",async i=>{await i.unlock(),m.refresh()}),a.commands.registerCommand("gitCommits.openWorktree",async i=>a.commands.executeCommand("vscode.openFolder",i.worktree.uri,!0)),a.commands.registerCommand("gitCommits.addWorktree",async()=>{const i=await a.window.showInputBox({prompt:"Enter path for new worktree",value:m.manager?.repository.rootUri.fsPath});if(!i)return!1;await m.manager?.addWorktree(i),m.refresh()}),a.commands.registerCommand("gitCommits.removeWorktree",async i=>{if(!await a.window.showInformationMessage(`Are you sure you want to remove "${i.label}" worktree?`,{modal:!0},{title:"Remove"}))return!1;await i.remove(),m.refresh()}),a.window.registerFileDecorationProvider(L),a.window.registerFileDecorationProvider(W))}function Fe(){}exports.activate=Oe;exports.deactivate=Fe;
